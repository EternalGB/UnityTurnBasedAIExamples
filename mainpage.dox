/*! \mainpage Universal Turn Based AI
 *
 * \section what_is What is Universal Turn Based AI?
 *
 * Universal Turn Based AI is a general purpose solution for implementing an artificial intelligence player for any turn based game
 * in Unity. It is essentially a generic implementation of the Minimax algorithm with Alpha-Beta pruning that can be applied to any game domain.
 * Both a \ref UniversalTurnBasedAI.SingleThreadedTurnEngine "single threaded" and 
 * \ref UniversalTurnBasedAI.SingleThreadedTurnEngine "multi-threaded" implementation are provided. All the searching and move selection 
 * is done internally by the \ref UniversalTurnBasedAI.TurnEngine "TurnEngine", so you must
 * simply provide implementations of \ref UniversalTurnBasedAI.IGameState "IGameState", \ref UniversalTurnBasedAI.ITurn "ITurn" and
 * \ref UniversalTurnBasedAI.IEvaluator "IEvaluator". This will provide the system with your particular game's domain knowledge,
 * informing the \ref UniversalTurnBasedAI.TurnEngine "TurnEngine" on how to represent, generate and evaluate game states.
 *
 * \image html diagram.png
 * \image latex diagram.png
 * 
 * This diagram shows the general structure of the Universal Turn Based AI system. Requests for the next move to be made come in
 * from the left into the TurnEngine. A request is just the current \ref UniversalTurnBasedAI.IGameState "IGameState" which 
 * should contain information about which player's turn is next. The request is processed and a turn search is set up to run
 * in a separate thread.
 *
 * The TurnEngine is preconfigured at initialisation to search for a set amount of time, to a certain number of moves ahead
 * or both. Each \ref UniversalTurnBasedAI.IGameState "IGameState" must be capable of generating each \ref UniversalTurnBasedAI.ITurn "ITurn"
 * that is possible and valid for that game state and each \ref UniversalTurnBasedAI.ITurn "ITurn" must be capable of converting
 * its starting game state to a new valid game state. This creates the turn search loop.
 *
 * Each new game state is evaluated using an \ref UniversalTurnBasedAI.IEvaluator "IEvaluator" implementation, also provided to the turn engine at
 * initialisation. The evaluator computes the value of a given game state in terms of how close that game state is to a winning game state for a
 * particular player. This allows the turn engine to determine which initial moves are better or worse by looking some number of moves ahead and
 * assuming optimal play by each player where optimal play is defined as: "provides the best value from the IEvaluator implementation".
 *
 * 
 * \section multi_single Multi-Threaded vs. Single Threaded
 *
 * Whilst this system does provide a multi-threaded \ref UniversalTurnBasedAI.TurnEngine "TurnEngine" implementation it may not
 * perform better than the single threaded implementation for your particular game. This is due to the high overhead of managing
 * multiple threads. The multi-threaded implementation was included to give users the option to see if it provides better results
 * for their game's domain. It typically out performs the single threaded implementation for game domains where the search tree is
 * extremely wide i.e. at each game state there are VERY many possible moves that can be made.
 *
 */